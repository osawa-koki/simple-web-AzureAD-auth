name: My Main CI/CD Workflow

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  terraform-directory: ./terraform
  client-directory: ./client
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_FUNCTIONAPP_NAME: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './api'
  DOTNET_VERSION: '6.0'

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.0
    - name: Create terraform.tfvars file
      run: echo $'${{ secrets.TFVARS }}' > terraform.tfvars
      working-directory: ${{ env.terraform-directory }}
    - name: Terraform Init
      run: terraform init -upgrade
            -backend-config="storage_account_name=${{ secrets.STORAGRE_ACOUNT_NAME }}"
            -backend-config="container_name=${{ secrets.CONTAINER_NAME }}"
            -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}"
      working-directory: ${{ env.terraform-directory }}
    - name: Terraform Plan
      run: terraform plan
      working-directory: ${{ env.terraform-directory }}
    - name: Terraform Apply
      run: terraform apply --auto-approve
      working-directory: ${{ env.terraform-directory }}
  azufunc-build-deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
    - name: 'Checkout GitHub action'
      uses: actions/checkout@v3
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Get Azure Functions Publish Profile
      id: profile
      run: |
        az functionapp deployment list-publishing-profiles -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AZURE_FUNCTIONAPP_NAME }} --xml >> $GITHUB_ENV
    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd
    - name: 'Run Azure Functions action'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
        publish-profile: ${{ env.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
  nextjs-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: yarn
          cache-dependency-path: ./**/yarn.lock
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: yarn install
        working-directory: ${{ env.client-directory }}
      - name: Build with Next.js
        run: yarn build
        working-directory: ${{ env.client-directory }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ${{ env.client-directory }}/dist
  nextjs-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: nextjs-build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
